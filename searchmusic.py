import os
import telebot
from telebot import types
import yt_dlp
import re
from concurrent.futures import ThreadPoolExecutor

TOKEN = '7939631781:AAGBR38TykN2YyIh8dh2qQSRM11FtXGqTVY'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
bot = telebot.TeleBot(TOKEN)

DOWNLOAD_FOLDER = 'downloads'
os.makedirs(DOWNLOAD_FOLDER, exist_ok=True)

def search_youtube(query):
    ydl_opts = {'quiet': True, 'noplaylist': True, 'extract_flat': True}
    with yt_dlp.YoutubeDL(ydl_opts) as ydl:
        try:
            result = ydl.extract_info(f"ytsearch5:{query}", download=False)
            if result and 'entries' in result:
                return result['entries']
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {e}")
    return []

def download_audio(url):
    ydl_opts = {
        'format': 'bestaudio/best',
        'outtmpl': f'{DOWNLOAD_FOLDER}/%(title)s.%(ext)s',
        'quiet': True,
        'postprocessors': [{
            'key': 'FFmpegExtractAudio',
            'preferredcodec': 'mp3',
            'preferredquality': '192',
        }],
    }
    try:
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info_dict = ydl.extract_info(url, download=True)
            filename = ydl.prepare_filename(info_dict).replace('.webm', '.mp3').replace('.m4a', '.mp3')
            return filename
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏: {e}")
    return None

@bot.message_handler(commands=['start'])
def send_welcome(message):
    welcome_text = (
        "üëã **‘≤’°÷Ä’´ ’£’°’¨’∏÷Ç’Ω’ø!**\n\n"
        "üéµ ‘µ’Ω ’Ø’°÷Ä’∏’≤ ’•’¥ ’£’ø’∂’•’¨ ’•÷Ä’£’•÷Ä YouTube-’∏÷Ç’¥ ÷á ’∏÷Ç’≤’°÷Ä’Ø’•’¨ ÷Ñ’•’¶ MP3 ÷Ü’∏÷Ä’¥’°’ø’∏’æ!\n"
        "üîé ’à÷Ç’≤’°÷Ä’Ø’´÷Ä ’´’∂’± ’•÷Ä’£’´ ’°’∂’∏÷Ç’∂’®, ÷á ’•’Ω ’Ø’Ω’Ø’Ω’•’¥ ’∏÷Ä’∏’∂’∏÷Ç’¥’®÷â\n\n"
        "üìå **’ï÷Ä’´’∂’°’Ø:** `Miyagi I Got Love`\n\n"
        "üí° ’ç’•’≤’¥’´÷Ä /help, ’•’©’• ’∏÷Ç’∂’•’Ω ’∞’°÷Ä÷Å’•÷Ä÷â"
    )
    bot.send_message(message.chat.id, welcome_text, parse_mode="Markdown")

@bot.message_handler(commands=['help'])
def send_help(message):
    help_text = (
        "üìñ **‘ª’∂’π’∫’•’Ω ÷Ö’£’ø’æ’•’¨ ’¢’∏’ø’´÷Å:**\n\n"
        "1. ’à÷Ç’≤’°÷Ä’Ø’•÷Ñ ’´’∂’± ’•÷Ä’£’´ ’Ø’°’¥ ’°÷Ä’ø’´’Ω’ø’´ ’°’∂’∏÷Ç’∂’®÷â\n"
        "2. ‘µ’Ω ÷Å’∏÷Ç’µ÷Å ’Ø’ø’°’¥ YouTube-’´ 5 ’¨’°’æ’°’£’∏÷Ç’µ’∂ ’°÷Ä’§’µ’∏÷Ç’∂÷Ñ’∂’•÷Ä’®÷â\n"
        "3. ‘∏’∂’ø÷Ä’•÷Ñ ’•÷Ä’£’® ÷Å’°’∂’Ø’´÷Å÷â\n"
        "4. ‘µ÷Ä’£’® ’Ø’æ’•÷Ä’°÷É’∏’≠’æ’´ MP3 ’±÷á’°’π’°÷É’´ ÷á ’Ø’∏÷Ç’≤’°÷Ä’Ø’æ’´ ’±’•’¶÷â\n\n"
        "‚ùó **’Ü’∑’∏÷Ç’¥:**\n"
        "- ‘±’¥’¢’∏’≤’ª ’∫÷Ä’∏÷Å’•’Ω’® ’Ø’°÷Ä’∏’≤ ’ß ’ø÷á’•’¨ ’¥’´ ÷Ñ’°’∂’´ ÷Ä’∏’∫’•, ’Ø’°’≠’æ’°’Æ ’´’∂’ø’•÷Ä’∂’•’ø’´ ’°÷Ä’°’£’∏÷Ç’©’µ’∏÷Ç’∂’´÷Å÷â\n"
        "- ‘µ’©’• ’´’∂’π-’∏÷Ä ’¢’°’∂ ’π’´ ’°’∑’≠’°’ø’∏÷Ç’¥, ÷É’∏÷Ä’±’•÷Ñ ’Ø÷Ä’Ø’´’∂÷â\n\n"
        "üì© **’Ä’°÷Ä÷Å’•÷Ä’´ ’§’•’∫÷Ñ’∏÷Ç’¥ ’§’´’¥’•÷Ñ:** @ldftcer"
    )
    bot.send_message(message.chat.id, help_text, parse_mode="Markdown")

@bot.message_handler(func=lambda message: True)
def handle_query(message):
    query = message.text
    bot.send_message(
        message.chat.id,
        f"üîç **’à÷Ä’∏’∂’∏÷Ç’¥:** `{query}`\n\n‚è≥ ‘Ω’∂’§÷Ä’∏÷Ç’¥ ’•’¥ ’Ω’∫’°’Ω’•’¨ ’¥’´ ÷É’∏÷Ñ÷Ä...",
        parse_mode="Markdown"
    )
    results = search_youtube(query)
    
    if not results:
        bot.send_message(message.chat.id, "üòî ‘µ÷Ä’£’® ’π’£’ø’∂’æ’•÷Å÷â ’ì’∏÷Ä’±’´÷Ä ’°’µ’¨ ’°’∂’æ’°’∂’∏÷Ç’¥÷â")
        return

    markup = types.InlineKeyboardMarkup()
    for result in results:
        if 'url' in result or 'id' in result:  
            title = re.sub(r'\[.*?\]', '', result.get('title', 'No Title'))  
            video_url = f"https://www.youtube.com/watch?v={result['id']}" if 'id' in result else result['url']
            button_text = f"üéß {title}"
            button = types.InlineKeyboardButton(text=button_text, callback_data=video_url)
            markup.add(button)

    bot.send_message(message.chat.id, "üí° ‘∏’∂’ø÷Ä’•÷Ñ ’•÷Ä’£’® ’Ω’ø’∏÷Ä÷áüëá", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: True)
def handle_callback(call):
    bot.answer_callback_query(call.id, "‚è≥ ’Ü’•÷Ä’¢’•’º’∂’∏÷Ç’¥ ’•’¥... ’≠’∂’§÷Ä’∏÷Ç’¥ ’•’¥ ’Ω’∫’°’Ω’´÷Ä...")

    def download_and_send():
        audio_file = download_audio(call.data)
        if audio_file:
            bot.send_message(call.message.chat.id, "‚úÖ **‘µ÷Ä’£’® ’∫’°’ø÷Ä’°’Ω’ø ’ß! ’à÷Ç’≤’°÷Ä’Ø’∏÷Ç’¥ ’•’¥...**", parse_mode="Markdown")
            try:
                with open(audio_file, 'rb') as audio:
                    caption = "üéµ ’Ü’•÷Ä’¢’•’º’∂’æ’•’¨ ’ß  @melodyi_bot \nüîó @ishkachka | @ldftcer"
                    bot.send_audio(
                        call.message.chat.id, 
                        audio, 
                        title=os.path.basename(audio_file), 
                        caption=caption
                    )
            except Exception as e:
                bot.send_message(call.message.chat.id, "‚ùå ’â’∞’°’ª’∏’≤’æ’•÷Å ’∏÷Ç’≤’°÷Ä’Ø’•’¨ ’•÷Ä’£’®÷â")
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {e}")
            finally:
                os.remove(audio_file)  
        else:
            bot.send_message(call.message.chat.id, "‚ùå ’â’∞’°’ª’∏’≤’æ’•÷Å ’∂’•÷Ä’¢’•’º’∂’•’¨ ’•÷Ä’£’®÷â")

    with ThreadPoolExecutor(max_workers=5) as executor: 
        executor.submit(download_and_send)

print("\n" + "="*40)
print("üé∂ ‘≤’∏’ø ’∞’°’ª’∏’≤’∏÷Ç’©’µ’°’¥’¢ ’£’∏÷Ä’Æ’°÷Ä’Ø’æ’°’Æ ’ß! ’Ä’´’¥’° ’Ω’∫’°’Ω’∏÷Ç’¥ ’•’¥ ’∞’°’≤’∏÷Ä’§’°’£÷Ä’∏÷Ç’©’µ’∏÷Ç’∂’∂’•÷Ä’´’∂...")
print("üîó –†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ: @ergeripntrtuknerov_bot | @ishkachka | @ldftcer")
print("="*40 + "\n")

bot.polling(none_stop=True)
